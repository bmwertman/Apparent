# If you want to automatically update fastlane if a new version is available:
update_fastlane

private_lane :commit do |options|
  if options[:m] # There was a commit message
    sh("git add -A")
    sh("git commit -a -m '" + options[:m] +"'")
    if options[:b] # specify a branch to push to
      push_to_git_remote(local_branch: options[:b])
    else # or default branch is master
      push_to_git_remote
    end
    desc "Pushed commit to branch options[:b]"
  end
end

platform :android do

  before_all do
    # Make sure no debugger statements were left in our code 
    # ensure_no_debug_code
    # Make sure there are not uncommitted changes
    ensure_git_status_clean
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
  end

  lane :testLocal do

    cordova(
      platform: 'android',
      release: false
    )

    #Push changes to dev team
    sh(" cd .. code-push release-cordova Apparent-Android android --deploymentName Staging")

    crashlytics(
      apk_path: './platforms/android/build/outputs/apk/android-debug.apk',
      api_token: ENV['CRASHLYTICS_API_TOKEN'],
      build_secret: ENV['CRASHLYTICS_BUILD_SECRET'],
      notifications: true,
      groups: "android-local-development",
      debug: true
    )
  end

  lane :beta do |options|
    if options[:m]
      commit(options)
      # changelog_from_git_commits(
      #   # pretty: "- (%ae) %s", # Optional, lets you provide a custom format to apply to each commit when generating the changelog text
      #   match_lightweight_tag: false, # Optional, lets you ignore lightweight (non-annotated) tags when searching for the last tag
      #   include_merges: false # Optional, lets you filter out merge commits
      # )

      # stamp_changelog( section_identifier: this_commit[:abbreviated_commit_hash] )
    end

    # commit = last_git_commit
    # crashlytics(notes: commit[:message]) # message of commit
    # author = commit[:author] # author of the commit
    # hash = commit[:commit_hash] # long sha of commit
    # short_hash = commit[:abbreviated_commit_hash] # short sha of commit
    # increment_version_code()

    cordova(
      platform: 'android',
      release: false
    )

    #Push new release to existing Beta testers
    sh("cd .. code-push release-cordova Apparent-Android android --deploymentName Beta")

    #Push new release for initial install to new Android Developer devices
    crashlytics(
      apk_path: './platforms/android/build/outputs/apk/android-debug.apk',
      api_token: ENV['CRASHLYTICS_API_TOKEN'],
      build_secret: ENV['CRASHLYTICS_BUILD_SECRET'],
      notifications: true,
      groups: "android-beta",
      debug: true
    )
      
    say "Brad you rocked another android deployment"
  end
end

platform :ios do
  before_all do
    # Make sure no debugger statements were left in our code 
    # ensure_no_debug_code
    # Make sure there are not uncommitted changes
    ensure_git_status_clean
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."  
    cocoapods(
      use_bundle_exec: false,
      podfile: "./platforms/ios/Podfile"
    )
  end

  lane :testLocal do
    app_name_sanitized = 'Apparent'

    patch(
      files:'../www/index.html'
      regexp:/[c][o][n][f][i]\w+/,
      text: ENV['DEVELOPMENT'],
      mode: :replace
    )

    match(
      git_url: ENV['CERTS_GIT_URL'],
      git_branch: "development",
      type: "development",
      app_identifier: ENV['APP_ID'],
      verbose: true,
      username: ENV['APPLE_USERNAME'],
      team_id: ENV['TEAM_ID'],
      team_name: ENV['APPLE_TEAM_NAME'],
      force_for_new_devices: true,
      platform: "ios"
    )

    gym(
      workspace: "platforms/ios/#{app_name_sanitized}.xcworkspace",
      clean: true,
      export_method: "development",
      scheme: app_name_sanitized
    )

    #Push new release for initial install to new iOS Developer devices
    crashlytics(
      api_token: ENV['CRASHLYTICS_API_TOKEN'],
      build_secret: ENV['CRASHLYTICS_BUILD_SECRET'],
      notifications: true,
      groups: "ios-local-development",
      debug: true
    )
  end

  lane :beta do |options|
    app_name_sanitized = 'Apparent'
    ios_project_path = "platforms/ios/#{app_name_sanitized}.xcodeproj"

    if options[:bump_type]
      increment_version_number(
        bump_type: options[:bump_type],
        xcodeproj: ios_project_path
      )
    elsif options[:version_number]
      increment_version_number(
        version_number: options[:version_number],
        xcodeproj: ios_project_path
      )
    end

    if options[:build_number]
      increment_build_number(
        build_number: options[:build_number],
        xcodeproj: ios_project_path
      )
    else
      increment_build_number(
        xcodeproj: ios_project_path
      )
    end

    match(
      git_url: ENV['CERTS_GIT_URL'],
      git_branch: "master",
      type: "adhoc",
      app_identifier: ENV['APP_ID'],
      verbose: true,
      username: ENV['APPLE_USERNAME'],
      team_id: ENV['TEAM_ID'],
      team_name: ENV['APPLE_TEAM_NAME'],
      force_for_new_devices: true,
      platform: "ios"
    )

    pem(
      generate_p12: true,
      app_identifier: ENV['APP_ID'],
      username: ENV['APPLE_USERNAME'],
      p12_password: ENV['P12_PASSWORD'],
      pem_name: 'certificate',
      output_path: 'apparent/pem'
    )

    gym(
      workspace: "platforms/ios/#{app_name_sanitized}.xcworkspace",
      clean: true,
      export_method: "ad-hoc",
      scheme: app_name_sanitized
    )

    #Make new iOS release available for new Beta testers to install
    crashlytics(
      api_token: ENV['CRASHLYTICS_API_TOKEN'],
      build_secret: ENV['CRASHLYTICS_BUILD_SECRET'],
      notifications: true,
      groups: "ios-beta-1",
      debug: true
    )

    say "Brad you rocked another i o s deployment"
  end

  desc "Deploy a new version to the App Store"
  lane :release do
    # match(type: "appstore")
    # snapshot
    gym # Build your app - more options available
    deliver(force: true)
    # frameit
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end
